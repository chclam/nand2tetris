/**
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
  IN in[16], load, address[15];
  OUT out[16];
  
  PARTS:
  DMux(in=load, sel=address[14], a=loadram, b=loadscreen);
 
  RAM16K(in=in, load=loadram, address=address[0..13], out=outram);
  Screen(in=in, load=loadscreen, address=address[0..12], out=outscreen);
  Keyboard(out=outkb);

  /* 
  addrkb iff address + 10011111111111111 = 11111111111111111 
  where address = 0110000000000000
  */
  Add16(
    a[0..14]=address, a[15]=false,
    b[0..12]=true, b[13..14]=false, b[15]=true,
    out=addrkb1
  );
  Not16(in=addrkb1, out[0..7]=addrkb2, out[8..15]=addrkb3);
  Or8Way(in=addrkb2, out=addrkb4);
  Or8Way(in=addrkb3, out=addrkb5);
  Or(a=addrkb4, b=addrkb5, out=notaddrkb);
  Not(in=notaddrkb, out=addrkb); 
  
  Mux16(a=outram, b=outscreen, sel=address[14], out=out1);
  Mux16(a=out1, b=outkb, sel=addrkb, out=out);
}
